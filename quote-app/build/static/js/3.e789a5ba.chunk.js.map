{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","commentText","current","value","quoteId","commentData","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","data","addCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","path","exact","to","url","NoQuotesFound"],"mappings":"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","file":"static/js/3.e789a5ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2lQDy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3JATj\",\"loading\":\"NewCommentForm_loading__2D-q5\",\"control\":\"NewCommentForm_control__voS4u\",\"actions\":\"NewCommentForm_actions__3OHaB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3cUK6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2Ldy6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__ASGtz\"};","import {useEffect, useRef} from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from \"../../hooks/use-http\";\nimport {addComment} from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef();\n    const {sendRequest, status, error} = useHttp(addComment);\n\n    const {onAddedComment} = props;\n\n    useEffect(() => {\n        if (status === 'completed' && !error) {\n            onAddedComment();\n        }\n    }, [status, error, onAddedComment])\n\n    const submitFormHandler = (event) => {\n        event.preventDefault();\n\n        // optional: Could validate here\n        const commentText = commentTextRef.current.value;\n\n        // send comment to server\n        sendRequest({\n            quoteId: props.quoteId,\n            commentData: {text: commentText}\n        });\n\n        commentTextRef.current.value = ''\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === 'pending' && (<div className='centered'>\n                <LoadingSpinner/>\n            </div>)}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor='comment'>Your Comment</label>\n                <textarea id='comment' rows='5' ref={commentTextRef}/>\n            </div>\n            <div className={classes.actions}>\n                <button className='btn'>Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import {useCallback, useEffect, useState} from 'react';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport {useParams} from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport {getAllComments} from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const params = useParams();\n    const {sendRequest, data:comments,status } = useHttp(getAllComments);\n\n    useEffect(() => {\n       sendRequest(params.quoteId);\n    },[sendRequest, params.quoteId])\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    const addCommentHandler = useCallback(() => {\n        sendRequest(params.quoteId);\n    }, [sendRequest,params.quoteId])\n\n    let commentData;\n\n    if(status === 'pending'){\n        commentData = <div className='centered'>\n            <LoadingSpinner />\n        </div>\n    }\n\n    if(status === 'completed' && comments && comments.length > 0) {\n        commentData = <CommentsList comments={comments}/>\n    }\n\n    if(status === 'completed' && (!comments || comments.length === 0)) {\n        commentData = <p className='centered'>No comment has been added yet!!</p>\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className='btn' onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && <NewCommentForm onAddedComment={addCommentHandler} quoteId={params.quoteId}/>}\n            {commentData}\n        </section>\n    );\n};\n\nexport default Comments;","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import {Link, Route, useParams, useRouteMatch} from \"react-router-dom\";\r\nimport {Fragment, useEffect} from \"react\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport {getSingleQuote} from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n\r\n    const params = useParams();\r\n    const match = useRouteMatch();\r\n\r\n    const {sendRequest, status, error, data: quote} = useHttp(getSingleQuote)\r\n\r\n    const {quoteId} = params;\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId)\r\n    }, [quoteId, sendRequest])\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <p className='centered focused'>\r\n                {error}\r\n            </p>\r\n        )\r\n    }\r\n\r\n    if (!quote) {\r\n        return <NoQuotesFound/>\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote text={quote.text} author={quote.author}/>\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link to={`${match.url}/comments`} className='btn--flat'>Load Comments</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments/>\r\n            </Route>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}